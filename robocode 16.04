package cs;

import robocode.*;
import java.awt.Color;
//Mateus, Ingrid e Deryk

public class MID_SQUAD extends AdvancedRobot {


	boolean peek; // Não virar se tiver um robô
	double moveAmount; // Quanto mover

	/**
	 * run: Move ao redor das paredes
	 */
	public void run() {
		setColors(Color.magenta, Color.magenta, Color.magenta); // corpo, arma, radar

		// Inicializa moveAmount para o máximo possível para este campo de batalha.
		moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());
		// Inicializa peek como falso
		peek = false;

		// Vira à esquerda para uma parede.
		// getHeading() % 90 significa o resto de
		// getHeading() dividido por 90.
		turnLeft(getHeading() % 90);
		ahead(moveAmount);
		// Vira a arma para virar à direita 90 graus.
		peek = true;
		turnGunRight(90);
		turnRight(90);

		while (true) {
			// Olha antes de virar quando ahead() completa.
			peek = true;
			// Move pela parede
			ahead(moveAmount);
			// Não olha agora
			peek = false;
			// Vira para a próxima parede
			turnRight(90);
		}
	}
/**
     * onHitByBullet: O que fazer quando você é atingido por uma bala
     */
    public void onHitByBullet(HitByBulletEvent e) {
      // Gira o robô em uma direção aleatória e move para frente
    if (Math.random() < 0.5) {
        turnRight(90); // Gira para a direita
    } else {
        turnLeft(90); // Gira para a esquerda
    }
    ahead(50); // Move para frente
}
public void onHitRobot(HitRobotEvent e) {
    // Verifica se há robôs inimigos na frente antes de recuar
    if (getOthers() > 0 && e.getBearing() < 0) {
        // Robô colidiu na parte frontal, recua um pouco
        turnLeft(90);
        back(100);
    } else {
        // Adiciona aleatoriedade ao ângulo de giro
        int randomAngle = (int) (Math.random() * 90) - 45;
        turnRight(randomAngle);
        
        // Verifica a direção do robô que colidiu
        if (Math.abs(e.getBearing()) > 90) {
            // Robô colidiu na parte traseira, então avança um pouco
            ahead(100);
        } else {
            // Robô colidiu na parte frontal, então recua um pouco
            back(100);
        }
    }
}

	/**
	 * onScannedRobot: Atira
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
		fire(2);
		// Scan é chamado automaticamente quando o robô está se movendo.
		// Chamando manualmente aqui, garantimos que geramos outro evento de scan se houver um robô na próxima
		// parede, para que não comecemos a subir até que ele tenha ido embora.
		if (peek) {
			scan();
		}
	}
	 
}
